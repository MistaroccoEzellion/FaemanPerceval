{"pageProps":{"note":{"id":"qgapc6797jc0sesost5n2o0","title":"Timeout","desc":"","updated":1650473733034,"created":1650473398756,"custom":{},"fname":"zig-gatekeeper.timeout","type":"note","vault":{"fsPath":"vault"},"contentHash":"a72be1296449b1f6147205c41c2fe323","links":[],"anchors":{"usage":{"type":"header","text":"Usage","value":"usage","line":11,"column":0,"depth":2},"build":{"type":"header","text":"build","value":"build","line":58,"column":0,"depth":2}},"children":[],"parent":"ENDcCZFjAW9h66eDoFg7I","data":{}},"body":"<h1 id=\"timeout\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#timeout\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Timeout</h1>\n<p>Similar to the <code>alarm</code> module, but uses <code>SIGKILL</code> instead of <code>SIGALRM</code>, which is not blockable.</p>\n<h2 id=\"usage\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h2>\n<pre class=\"language-sh\"><code class=\"language-sh\">$ ./timeout 1 /bin/sh -c \"echo hello; sleep 2; echo nope\"\nhello\n&#x3C;exited>\n</code></pre>\n<blockquote>\n<p>The kill() system call can be used to send any signal to any process group or process.</p>\n</blockquote>\n<blockquote>\n<p>setpgid() sets the PGID of the process specified by pid to pgid.\nIf pid is zero, then the process ID of the calling process is\nused.  If pgid is zero, then the PGID of the process specified by\npid is made the same as its process ID.</p>\n</blockquote>\n<pre class=\"language-zig\"><code class=\"language-zig\">\n<span class=\"token keyword\">const</span> std <span class=\"token operator\">=</span> <span class=\"token builtin\">@import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"std\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stdout <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token function\">getStdOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\"><span class=\"token operator\">!</span><span class=\"token builtin-type keyword\">void</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">argsAlloc</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">.</span>allocator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">unreachable</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">defer</span> std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">argsFree</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">.</span>allocator<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>len <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: {s} &#x3C;seconds> &#x3C;command> [args...]\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token function\">kill_timeout</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token builtin-type keyword\">u32</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">catch</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">execv</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">.</span>allocator<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">kill_timeout</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token class-name\"><span class=\"token builtin-type keyword\">u32</span></span><span class=\"token punctuation\">)</span> <span class=\"token class-name\"><span class=\"token operator\">!</span><span class=\"token builtin-type keyword\">void</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> std<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">@as</span><span class=\"token punctuation\">(</span><span class=\"token builtin-type keyword\">u32</span><span class=\"token punctuation\">,</span> seconds <span class=\"token operator\">*</span> 1_000_000_000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> std<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>SIG<span class=\"token punctuation\">.</span>KILL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    _ <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span><span class=\"token function\">syscall2</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>SYS<span class=\"token punctuation\">.</span>setpgid<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2 id=\"build\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#build\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>build</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">zig build-exe timeout.zig -O ReleaseSmall --strip -fsingle-threaded \n</code></pre>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1650269509622,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1d0083793d513937815f3b120bf14a5e","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1}},"children":["ENDcCZFjAW9h66eDoFg7I"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is root.\n\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/FaemanPerceval","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://mistaroccoezellion.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}