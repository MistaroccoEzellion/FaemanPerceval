{"pageProps":{"note":{"id":"mnxgg66ue8xgf0468uqe7vr","title":"Alarm","desc":"","updated":1650473377462,"created":1650438994657,"custom":{},"fname":"zig-gatekeeper.alarm","type":"note","vault":{"fsPath":"vault"},"contentHash":"108f8f4999408515e869affe3e76ff8e","links":[],"anchors":{"usage":{"type":"header","text":"Usage","value":"usage","line":19,"column":0,"depth":2},"build":{"type":"header","text":"build","value":"build","line":56,"column":0,"depth":2}},"children":[],"parent":"ENDcCZFjAW9h66eDoFg7I","data":{}},"body":"<h1 id=\"alarm\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#alarm\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Alarm</h1>\n<p>Sets an alarm for the underlying process.</p>\n<p>This ensures that, without malicious interception, the process\nshould automatically die after the specified number of seconds.</p>\n<p>This is automatically transferred to all child processes and across\nsession and process group boundaries, so there is no need to do\nanything about child processes.</p>\n<h2 id=\"usage\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h2>\n<pre><code>$ ./alarm 5 /bin/sh -c \"echo hello; sleep 6; echo nope\"\nhello\n&#x3C;exited>\n</code></pre>\n<blockquote>\n<p>The alarm() function shall cause the system to generate a SIGALRM signal for the process after the number of realtime seconds specified by seconds have elapsed.</p>\n</blockquote>\n<blockquote>\n<p>APPLICATION USAGE\nThe fork() function clears pending alarms in the child process. A new process image created by one of the exec functions inherits the time left to an alarm signal in the old process' image.</p>\n</blockquote>\n<blockquote>\n<p>The exec family of functions shall replace the current process image with a new process image. The new image shall be constructed from a regular, executable file called the new process image file. There shall be no return from a successful exec, because the calling process image is overlaid by the new process image</p>\n</blockquote>\n<pre class=\"language-zig\"><code class=\"language-zig\"><span class=\"token keyword\">const</span> std <span class=\"token operator\">=</span> <span class=\"token builtin\">@import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"std\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stdout <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token function\">getStdOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\"><span class=\"token operator\">!</span><span class=\"token builtin-type keyword\">void</span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">argsAlloc</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">.</span>allocator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">unreachable</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">defer</span> std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">argsFree</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">.</span>allocator<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>len <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        std<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: {s} &#x3C;seconds> &#x3C;command> [args...]\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// TODO: make alarm() in zig with std.os.raise() or std.os.kill()      </span>\n    _ <span class=\"token operator\">=</span> std<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token builtin-type keyword\">u32</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">catch</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// std.time.sleep(10e9); // 10 seconds</span>\n\n    <span class=\"token keyword\">return</span> std<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">execv</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">.</span>allocator<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"build\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#build\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>build</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">zig build-exe alarm.zig -O ReleaseSmall --strip -fsingle-threaded -lc\n</code></pre>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1650269509622,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1d0083793d513937815f3b120bf14a5e","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1}},"children":["ENDcCZFjAW9h66eDoFg7I"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is root.\n\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/FaemanPerceval","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://mistaroccoezellion.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}