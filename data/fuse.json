{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Welcome to Dendron\n\nThis is root.\n\n","n":0.408}}},{"i":2,"$":{"0":{"v":"Zig Gatekeeper","n":0.707},"1":{"v":"\n\n\nfork of https://github.com/samuraictf/gatekeeper\n","n":0.577}}},{"i":3,"$":{"0":{"v":"Timeout","n":1},"1":{"v":"\n\nSimilar to the `alarm` module, but uses `SIGKILL` instead of `SIGALRM`, which is not blockable.\n\n## Usage\n\n```sh\n$ ./timeout 1 /bin/sh -c \"echo hello; sleep 2; echo nope\"\nhello\n<exited>\n```\n\n> The kill() system call can be used to send any signal to any process group or process.\n\n> setpgid() sets the PGID of the process specified by pid to pgid.\n       If pid is zero, then the process ID of the calling process is\n       used.  If pgid is zero, then the PGID of the process specified by\n       pid is made the same as its process ID.\n\n\n```zig\n\nconst std = @import(\"std\");\nconst stdout = std.io.getStdOut().writer();\n\npub fn main() !void {\n    const args = std.process.argsAlloc(std.testing.allocator) catch unreachable;\n    defer std.process.argsFree(std.testing.allocator, args);\n\n    if (args.len < 3) {\n        std.debug.print(\"usage: {s} <seconds> <command> [args...]\", .{args[0]});\n        std.process.exit(1);\n    }\n\n    try kill_timeout(std.fmt.parseInt(u32, args[1], 0) catch 0);\n\n    return std.process.execv(std.testing.allocator, args[2..]);\n}\n\nfn kill_timeout(seconds: u32) !void {\n    const child = try std.os.fork();\n\n    if (child == 0) {\n        std.time.sleep(@as(u32, seconds * 1_000_000_000));\n        try std.os.kill(child, std.os.SIG.KILL);\n    }\n    _ = std.os.linux.syscall2(std.os.SYS.setpgid, 0, 0);\n}\n\n```\n\n## build\n\n```bash\nzig build-exe timeout.zig -O ReleaseSmall --strip -fsingle-threaded \n```","n":0.078}}},{"i":4,"$":{"0":{"v":"Alarm","n":1},"1":{"v":"\n\n\nSets an alarm for the underlying process.\n\nThis ensures that, without malicious interception, the process\nshould automatically die after the specified number of seconds.\n\nThis is automatically transferred to all child processes and across\nsession and process group boundaries, so there is no need to do\nanything about child processes.\n\n## Usage\n\n    $ ./alarm 5 /bin/sh -c \"echo hello; sleep 6; echo nope\"\n    hello\n    <exited>\n\n>The alarm() function shall cause the system to generate a SIGALRM signal for the process after the number of realtime seconds specified by seconds have elapsed.\n\n\n> APPLICATION USAGE\nThe fork() function clears pending alarms in the child process. A new process image created by one of the exec functions inherits the time left to an alarm signal in the old process' image.\n\n> The exec family of functions shall replace the current process image with a new process image. The new image shall be constructed from a regular, executable file called the new process image file. There shall be no return from a successful exec, because the calling process image is overlaid by the new process image\n\n```zig\nconst std = @import(\"std\");\nconst stdout = std.io.getStdOut().writer();\n\npub fn main() !void{\n    const args = std.process.argsAlloc(std.testing.allocator) catch unreachable;\n    defer std.process.argsFree(std.testing.allocator, args);\n    \n    if (args.len < 3){\n        std.debug.print(\"usage: {s} <seconds> <command> [args...]\", .{args[0]});\n        std.process.exit(1);\n    }\n\n    // TODO: make alarm() in zig with std.os.raise() or std.os.kill()      \n    _ = std.c.alarm(std.fmt.parseInt(u32, args[1], 0) catch 0); \n\n    // std.time.sleep(10e9); // 10 seconds\n\n    return std.process.execv(std.testing.allocator, args[2..]);\n\n}\n```\n\n## build\n\n```bash\nzig build-exe alarm.zig -O ReleaseSmall --strip -fsingle-threaded -lc\n```","n":0.065}}}]}
